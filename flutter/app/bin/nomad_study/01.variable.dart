void main() {
  // var - 최초로 받은 값의 타입이 지정됨, var 변수를 수정할 때 다른 타입으로 바꿀 수 없음.
  var name = '조니'; // 값이 문자열이기 떄문에 String으로 지정됨.
  name = '아이유'; // 값을 변경할 때, 최초로 지정된 타입만 가능. 여기서는 String이기 때문에 String만 받을 수 있음.

  // 변수의 타입을 아예 지정할 수 있음. ex) String, int, double, List, Map 등..
  String name2 = '조니'; // String 타입 선언 - name2라는 변수는 String만 받을 수 있음. (대문자 주의)
  name2 = '아이유'; //String만 받음.

  // dynamic - 어떤 타입이든 전부 값으로 넣을 수 있음.
  var name3; // 아무런 값도 주지 않으면 dynamic 타입으로 지정됨
  dynamic name4; // 혹은 dynamic 키워드 선언

  name3 = true;
  name3 = 1;
  name3 = '조니'; //어떤 타입이든 전부 대체되는 것을 확인할 수 있다.

  // ////////////////////////////////////////////////////////////////////////////////////

  /* 
    null safety = null 값을 제대로 체크해야 런타임 에러를 방지할 수 있다.
    타입 지정과 null 체크는 앱 처리속도를 좀더 빠르게 만들어주기 떄문에 
    사용자가 앱을 이용할 때 더욱 쾌적한 환경을 만들 수 있다.

    타입 키워드 뒤에 물음표를 달면 해당 변수는 지정한 타입 혹은 null값도 올 수 있다는 표시이다.
   */
  String? hello = '안녕하세요';

  //그런데 다이나믹은 그 자체로 null값도 올수 있기 때문에(nullable) 물음표가 필요없다.
  dynamic? hello2 = '안녕하세요';

  //var는 최초에 입력된 것으로 타입이 고정되기 때문에 그 외의 값이 절대 올 수 없다. ?는 쓸 수 없다.
  // var? hello3 = '안녕하세요';
  var empty = null;

  // ////////////////////////////////////////////////////////////////////////////////////

  // final 키워드가 선언된 변수는 수정이 불가능하다.
  final String z = '조니';
  // z = "나야"; // 수정 불가능

  // ////////////////////////////////////////////////////////////////////////////////////

  /* 
    late => 나중에 변수를 받아오는 키워드

    보통 APi 등으로 데이터를 불러온 후 그 뒤에 변수를 담아서 쓰는 경우가 있다.
   */

  // 처음에 데이터를 비워놓고
  late final String a;

  // 특정 상황에서 값을 할당할 수 있다. 
  // final을 안쓴다면 처음에 값을 넣을 수는 있다. 나중에 다른 값으로 대체하는 등 다양하게 활용 가능.
  a = '조니';

  // 당연히 final 키워드가 있기 때문에 late로 나중에 값이 할당된 이후로는 다시 값을 수정할 수 없다.
  // a = '아이유'; // 수정 불가능

  /* 
    const => 기본적인 기능은 final과 같지만, 컴파일(빌드) 타임에서 알 수 없는 값은 담을 수 없다는 차이점이 있다!

    가령, Api의 데이터를 담아야하는데, const로 선언되어 있으면, 데이터가 들어오기 전에는 값이 없기 때문에
    빌드타임 때 오류가 생긴다!!!

    혹은 사용자 입력값을 받아야하는 변수도 또한, 입력값이 들어오기 전엔 없기 때문에 const 선언이 불가능하다.
   */
  const b = 'b';
  // b = 'a'; 수정 불가능, final과 같음
  // const now = DateTime.now(); // const 선언 불가능, Datetime.now()는 실시간 로컬 타임을 반환해준다. 실시간이기 때문에 빌드타임때는 값이 없다.
}
